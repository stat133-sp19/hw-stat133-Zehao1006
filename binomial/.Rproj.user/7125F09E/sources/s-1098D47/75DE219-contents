}else if(trials<0|trials%%1!=0|class(trials)!='numeric'){
stop('invalid trials value')
}else{
return('TRUE')
}
}
check_trials(c(0.3,0.5))
check_trials('a')
check_trials('a')
# Description: check trials
# Inputs
#   trials: the number of trials
# Output
#   'TRUE' for a valid trials and a warning message for a invalid one
check_trials <- function(trials){
if (length(trials)>1){
stop('trials has to be length 1')
}else if(class(trials)!='numeric'|trials<0|trials%%1!=0){
stop('invalid trials value')
}else{
return('TRUE')
}
}
check_trials('a')
check_prob <- function(prob){
if ( length(prob)>1 ){
stop('prob has to be length 1')
} else if (class(prob)!='numberic'){
stop('invalid prob value')
} else if(prob<0|prob>1){
stop('invalid prob value')
} else{
return('TRUE')
}
}
check_prob('a')
# Description: check trials
# Inputs
#   trials: the number of trials
# Output
#   'TRUE' for a valid trials and a warning message for a invalid one
check_trials <- function(trials){
if (length(trials)>1){
stop('trials has to be length 1')
}else if (class(trials)!='numeric'){
stop('invalid trials value')
}else if(trials<0|trials%%1!=0){
stop('invalid trials value')
}else{
return('TRUE')
}
}
check_trials('a')
check_trials(T)
library('testthat')
0.3%%1
5*4*3*2/2/3/2
if (check_trials(trials)!='TRUE'){
check_trials(trials)
} else if (check_success(success,trials) !='TRUE'){
check_success(success,trials)
} else if (check_prob(prob) !='TRUE'){
check_prob(prob)
} else {
probability = bin_choose(trials, success)*prob^success*(1-prob)^(trials - success)
return(probability)
}
source('~/binomial/R/check_trials.R')
source('~/binomial/R/check_success.R')
source('~/binomial/R/check_prob.R')
source('~/binomial/R/bin_choose.R')
bin_probability <- function(success, trials, prob){
if (check_trials(trials)!='TRUE'){
check_trials(trials)
} else if (check_success(success,trials) !='TRUE'){
check_success(success,trials)
} else if (check_prob(prob) !='TRUE'){
check_prob(prob)
} else {
probability = bin_choose(trials, success)*prob^success*(1-prob)^(trials - success)
return(probability)
}
}
bin_probability(2,5,0.5)
bin_probability(success = 2, trials = 5, prob = 0.5)
check_prob(0.5)
check_prob <- function(prob){
if ( length(prob)>1 ){
stop('prob has to be length 1')
} else if (class(prob)!='numberic'){
stop('invalid prob value')
} else if(prob<0|prob>1){
stop('invalid prob value')
} else{
return('TRUE')
}
}
check_prob(0.5)
class(0.5)
source('~/binomial/R/check_trials.R')
source('~/binomial/R/check_success.R')
source('~/binomial/R/check_prob.R')
source('~/binomial/R/bin_choose.R')
bin_probability <- function(success, trials, prob){
if (check_trials(trials)!='TRUE'){
check_trials(trials)
} else if (check_success(success,trials) !='TRUE'){
check_success(success,trials)
} else if (check_prob(prob) !='TRUE'){
check_prob(prob)
} else {
probability = bin_choose(trials, success)*prob^success*(1-prob)^(trials - success)
return(probability)
}
}
bin_probability(2,5,0.5)
source('~/binomial/R/bin_probability.R')
bin_distribution <- function(trials, prob){
success = 0:trials
probability = bin_probability(success = 0:trials, trials = trials, prob = prob)
dat <- data.frame(
success = success,
probability = probability
)
class(dat) <- c('bindis','data.frame')
dat
}
dis1 <- bin_distribution(5,0.5)
typeof(dis1)
dis1
length(dis1)
source('~/binomial/R/bin_distribution.R')
bin_cumulative <- function(trials, prob){
dat <- bin_distribution(trials, prob)
cumulative <- rep(0,(trials+1))
for (i in 1:(trials+1)){
cumulative[i] = sum(dat[1:i,2])
}
dat$cumulative <- cumulative
class(dat) <- c('bincum','data.frame')
dat
}
bin2 <- bin_cumulative(5,0.5)
bin2
length(bin2)
typeof
typeof(bin2)
class(bin2)
class(bin1)
class(bin)
bin <- bin_distribution(5,0.5)
class(bin)
class(c(1,2))
library()
library('binomial')
source('~/binomial/R/check_trials.R')
source('~/binomial/R/check_success.R')
source('~/binomial/R/check_prob.R')
source('~/binomial/R/bin_choose.R')
bin_probability <- function(success, trials, prob){
if (check_trials(trials)!='TRUE'){
check_trials(trials)
} else if (check_success(success,trials) !='TRUE'){
check_success(success,trials)
} else if (check_prob(prob) !='TRUE'){
check_prob(prob)
} else {
probability = bin_choose(trials, success)*prob^success*(1-prob)^(trials - success)
return(probability)
}
}
bin_probability(2,5,0.5)
library('devtools')
install.packages('devtools')
library('devtools')
devtools::document()
devtools::check_man()
devtools::check_man()
library('binomial')
bin_choose(5,2)
bin_distribution(5,0.5)
bin_distribution(2,5)
devtools::check_man()
devtools::document()
devtools::check_man()
devtools::test()
devtools::test()
devtools::test()
a <- bin_cumulative(5,0.5)
bin_cumulative <- function(trials, prob){
dat <- bin_distribution(trials, prob)
cumulative <- rep(0,(trials+1))
for (i in 1:(trials+1)){
cumulative[i] = sum(dat[1:i,2])
}
dat$cumulative <- cumulative
class(dat) <- c('bincum','data.frame')
dat
}
a <- bin_cumulative(5,0.5)
bin_probability(2,5,0.5)
bin_distribution(5,0.5)
0:5
c(0:5)
bin_distribution <- function(trials, prob){
success = 0:trials
probability = bin_probability(success = c(0:trials), trials = trials, prob = prob)
dat <- data.frame(
success = success,
probability = probability
)
class(dat) <- c('bindis','data.frame')
dat
}
bin_distribution(5,0.5)
class(0:5)
typeof(0:5)
class(c(0:5))
library('binomial')
library('devtools')
devtools::document()
devtools::check_man
devtools::check_man()
devtools::test()
library('binomial')
class(0:5)
library('devtools')
library('binomial')
devtools::document()
class(0.5)
class(1)
class(1:5)
class(c(0.5,0.2))
a <- bin_distribution(5,0.5)
a <- bin_distribution(5,0.5)
bin_distribution()
aux_kurtosis <- function(trials, prob){
kurtosis <- (1-6*prob*(1-prob))/(trials*prob*(1-prob))
return(kurtosis)
}
aux_mean <- function(trials, prob){
return(trials*prob)
}
aux_mode <- function(trials, prob){
if (as.integer(trials*prob+prob) == trials*prob+prob){
return(c(as.integer(trials*prob+prob), as.integer(trials*prob+prob)-1))
} else{
return(as.integer(trials*prob+prob))
}
}
aux_skewness <- function(trials, prob){
skewness = (1-2*prob)/sqrt(trials*prob*(1-prob))
return(skewness)
}
aux_variance <- function(trials, prob){
return(trials*prob*(1-prob))
}
bin_choose <- function(n, k){
if (sum(k>n)>0){
stop('k cannot be greater than n')
}else{
combinations <- factorial(n)/(factorial(k)*factorial(n-k))
return(combinations)
}
}
bin_cumulative <- function(trials, prob){
dat <- bin_distribution(trials, prob)
cumulative <- rep(0,(trials+1))
for (i in 1:(trials+1)){
cumulative[i] = sum(dat[1:i,2])
}
dat$cumulative <- cumulative
class(dat) <- c('bincum','data.frame')
dat
}
plot.bincum <- function(dat){
plot(dat[,3],xlab = 'successes', ylab = 'probability', type = 'o',xaxt='n')
axis(1,at = seq(1,nrow(dat)+1),label = seq(0,nrow(dat)))
}
bin_distribution <- function(trials, prob){
success = 0:trials
probability = bin_probability(success = success, trials = trials, prob = prob)
dat <- data.frame(
success = success,
probability = probability
)
class(dat) <- c('bindis','data.frame')
dat
}
plot.bindis <- function(dat){
barplot(dat[,2], names.arg =  dat[,1], xlab = 'successes',ylab = 'probability')
}
bin_kurtosis <- function(trials, prob){
if (check_trials(trials)!='TRUE'){
check_trials(trials)
} else if (check_prob(prob) !='TRUE'){
check_prob(prob)
} else {
return(aux_kurtosis(trials,prob))
}
}
bin_mean <- function(trials, prob){
if (check_trials(trials)!='TRUE'){
check_trials(trials)
} else if (check_prob(prob) !='TRUE'){
check_prob(prob)
} else {
return(aux_mean(trials,prob))
}
}
bin_mode <- function(trials, prob){
if (check_trials(trials)!='TRUE'){
check_trials(trials)
} else if (check_prob(prob) !='TRUE'){
check_prob(prob)
} else {
return(aux_mode(trials,prob))
}
}
bin_probability <- function(success, trials, prob){
if (check_trials(trials)!='TRUE'){
check_trials(trials)
} else if (check_success(success,trials) !='TRUE'){
check_success(success,trials)
} else if (check_prob(prob) !='TRUE'){
check_prob(prob)
} else {
probability = bin_choose(trials, success)*prob^success*(1-prob)^(trials - success)
return(probability)
}
}
bin_skewness <- function(trials, prob){
if (check_trials(trials)!='TRUE'){
check_trials(trials)
} else if (check_prob(prob) !='TRUE'){
check_prob(prob)
} else {
return(aux_skewness(trials,prob))
}
}
bin_variable <- function(trials, prob){
if (check_trials(trials)!='TRUE'){
check_trials(trials)
} else if (check_prob(prob) !='TRUE'){
check_prob(prob)
} else {
dat <- list(
trials,
prob
)
names(dat) <- c('number of trials','probability of success')
class(dat) <- 'binvar'
return(dat)
}
}
bin_variable <- function(trials, prob){
if (check_trials(trials)!='TRUE'){
check_trials(trials)
} else if (check_prob(prob) !='TRUE'){
check_prob(prob)
} else {
dat <- list(
trials,
prob
)
names(dat) <- c('number of trials','probability of success')
class(dat) <- 'binvar'
return(dat)
}
}
print.binvar <- function(dat){
cat("\"Binomial variable\"\n")
cat("\n")
cat("Parameters\n")
cat(sprintf("- number of trials: %s\n",dat[1]))
cat(sprintf("- prob of success : %s",dat[2]))
invisible(dat)
}
summary.binvar <- function(dat){
a <- list(
dat[[1]],
dat[[2]],
aux_mean(dat[[1]],dat[[2]]),
aux_variance(dat[[1]],dat[[2]]),
aux_mode(dat[[1]],dat[[2]]),
aux_skewness(dat[[1]],dat[[2]]),
aux_kurtosis(dat[[1]],dat[[2]])
)
names(a) <- c('number of trials',
'probability of success',
'mean or expected value',
'variance',
'mode',
'skewness',
'kurtosis')
class(a) <- 'summary.binvar'
return(a)
}
bin_variance <- function(trials, prob){
if (check_trials(trials)!='TRUE'){
check_trials(trials)
} else if (check_prob(prob) !='TRUE'){
check_prob(prob)
} else {
return(aux_variance(trials,prob))
}
}
check_prob <- function(prob){
if ( length(prob)>1 ){
stop('prob has to be length 1')
} else if (class(prob)!='numeric'){
stop('invalid prob value')
} else if(prob<0|prob>1){
stop('invalid prob value')
} else{
return('TRUE')
}
}
check_success <- function(success,trials){
if (class(success)!='numeric'){
stop('invalid success value')
}else if (sum(success <0)+sum(success >trials) +sum(success%%1)> 0){
stop('invalid success value')
}else {
return('TRUE')
}
}
# Description: check trials
# Inputs
#   trials: the number of trials
# Output
#   'TRUE' for a valid trials and a warning message for a invalid one
check_trials <- function(trials){
if (length(trials)>1){
stop('trials has to be length 1')
}else if (class(trials)!='numeric'){
stop('invalid trials value')
}else if(trials<0|trials%%1!=0){
stop('invalid trials value')
}else{
return('TRUE')
}
}
check_success(0.5,2)
check_success(1:2,2)
check_success(1,5)
check_success <- function(success,trials){
if (class(success)!='interger'){
stop('invalid success value')
}else if (sum(success <0)+sum(success >trials) +sum(success%%1)> 0){
stop('invalid success value')
}else {
return('TRUE')
}
}
check_success(1:2,5)
class(1:2)
check_success(1:2,5)
check_success(suceess = 1:2, trials = 6)
check_success(success = 1:2, trials = 6)
5%%1
1:2
check_success <- function(success,trials){
if (sum(success <0)+sum(success >trials) +sum(success%%1)> 0){
stop('invalid success value')
}else {
return('TRUE')
}
}
check_success(5,6)
check(1:2,6)
check_success(1:2,6)
typeof
typeof(1:5)
typeof(5)
check_success <- function(success,trials){
if (class(success) == 'numeric'|class(success) == 'integer'){
if (sum(success <0)+sum(success >trials) +sum(success%%1)> 0){
stop('invalid success value')
}else {
return('TRUE')
}
}else{
stop('invalid success value')
}
}
check_success(1:2,6)
check_success(1,6)
a <- distribution
a <- bin_distribution(5,0.5)
a
length(a)
class(a)
typeof(a)
a <- bin_probability(5,0.5)
a <- bin_probability(5,5,0.5)
a
typeof(a)
library('devtools')
devtools::document()
devtools::check_man()
devtools::test()
devtools::test()
library('binomial')
devtools::build_vignettes()
devtools::build_vignettes()
devtools::build()
devtools::install()
devtools::check()
library('binomial')
library(binomial)
bin_choose(5,2)
